//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 5 colors.
  struct color {
    /// Color `blueGrey`.
    static let blueGrey = Rswift.ColorResource(bundle: R.hostingBundle, name: "blueGrey")
    /// Color `mariGold`.
    static let mariGold = Rswift.ColorResource(bundle: R.hostingBundle, name: "mariGold")
    /// Color `purplyBlue`.
    static let purplyBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "purplyBlue")
    /// Color `slate`.
    static let slate = Rswift.ColorResource(bundle: R.hostingBundle, name: "slate")
    /// Color `veryLightPink`.
    static let veryLightPink = Rswift.ColorResource(bundle: R.hostingBundle, name: "veryLightPink")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "blueGrey", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blueGrey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blueGrey, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "mariGold", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func mariGold(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mariGold, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "purplyBlue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func purplyBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.purplyBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "slate", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func slate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.slate, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "veryLightPink", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func veryLightPink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.veryLightPink, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 15 files.
  struct file {
    /// Resource file `.gitkeep`.
    static let gitkeep = Rswift.FileResource(bundle: R.hostingBundle, name: ".gitkeep", pathExtension: "")
    /// Resource file `LICENSE.txt`.
    static let licenseTxt = Rswift.FileResource(bundle: R.hostingBundle, name: "LICENSE", pathExtension: "txt")
    /// Resource file `Roboto-Black.ttf`.
    static let robotoBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Black", pathExtension: "ttf")
    /// Resource file `Roboto-BlackItalic.ttf`.
    static let robotoBlackItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-BlackItalic", pathExtension: "ttf")
    /// Resource file `Roboto-Bold.ttf`.
    static let robotoBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Bold", pathExtension: "ttf")
    /// Resource file `Roboto-BoldItalic.ttf`.
    static let robotoBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-BoldItalic", pathExtension: "ttf")
    /// Resource file `Roboto-Italic.ttf`.
    static let robotoItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Italic", pathExtension: "ttf")
    /// Resource file `Roboto-Light.ttf`.
    static let robotoLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Light", pathExtension: "ttf")
    /// Resource file `Roboto-LightItalic.ttf`.
    static let robotoLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-LightItalic", pathExtension: "ttf")
    /// Resource file `Roboto-Medium.ttf`.
    static let robotoMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Medium", pathExtension: "ttf")
    /// Resource file `Roboto-MediumItalic.ttf`.
    static let robotoMediumItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-MediumItalic", pathExtension: "ttf")
    /// Resource file `Roboto-Regular.ttf`.
    static let robotoRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Regular", pathExtension: "ttf")
    /// Resource file `Roboto-Thin.ttf`.
    static let robotoThinTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Thin", pathExtension: "ttf")
    /// Resource file `Roboto-ThinItalic.ttf`.
    static let robotoThinItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-ThinItalic", pathExtension: "ttf")
    /// Resource file `wAppAnimation.json`.
    static let wAppAnimationJson = Rswift.FileResource(bundle: R.hostingBundle, name: "wAppAnimation", pathExtension: "json")

    /// `bundle.url(forResource: ".gitkeep", withExtension: "")`
    static func gitkeep(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gitkeep
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "LICENSE", withExtension: "txt")`
    static func licenseTxt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.licenseTxt
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Black", withExtension: "ttf")`
    static func robotoBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-BlackItalic", withExtension: "ttf")`
    static func robotoBlackItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoBlackItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Bold", withExtension: "ttf")`
    static func robotoBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-BoldItalic", withExtension: "ttf")`
    static func robotoBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Italic", withExtension: "ttf")`
    static func robotoItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Light", withExtension: "ttf")`
    static func robotoLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-LightItalic", withExtension: "ttf")`
    static func robotoLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Medium", withExtension: "ttf")`
    static func robotoMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-MediumItalic", withExtension: "ttf")`
    static func robotoMediumItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoMediumItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Regular", withExtension: "ttf")`
    static func robotoRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Thin", withExtension: "ttf")`
    static func robotoThinTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoThinTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-ThinItalic", withExtension: "ttf")`
    static func robotoThinItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoThinItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "wAppAnimation", withExtension: "json")`
    static func wAppAnimationJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.wAppAnimationJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 12 fonts.
  struct font: Rswift.Validatable {
    /// Font `Roboto-BlackItalic`.
    static let robotoBlackItalic = Rswift.FontResource(fontName: "Roboto-BlackItalic")
    /// Font `Roboto-Black`.
    static let robotoBlack = Rswift.FontResource(fontName: "Roboto-Black")
    /// Font `Roboto-BoldItalic`.
    static let robotoBoldItalic = Rswift.FontResource(fontName: "Roboto-BoldItalic")
    /// Font `Roboto-Bold`.
    static let robotoBold = Rswift.FontResource(fontName: "Roboto-Bold")
    /// Font `Roboto-Italic`.
    static let robotoItalic = Rswift.FontResource(fontName: "Roboto-Italic")
    /// Font `Roboto-LightItalic`.
    static let robotoLightItalic = Rswift.FontResource(fontName: "Roboto-LightItalic")
    /// Font `Roboto-Light`.
    static let robotoLight = Rswift.FontResource(fontName: "Roboto-Light")
    /// Font `Roboto-MediumItalic`.
    static let robotoMediumItalic = Rswift.FontResource(fontName: "Roboto-MediumItalic")
    /// Font `Roboto-Medium`.
    static let robotoMedium = Rswift.FontResource(fontName: "Roboto-Medium")
    /// Font `Roboto-Regular`.
    static let robotoRegular = Rswift.FontResource(fontName: "Roboto-Regular")
    /// Font `Roboto-ThinItalic`.
    static let robotoThinItalic = Rswift.FontResource(fontName: "Roboto-ThinItalic")
    /// Font `Roboto-Thin`.
    static let robotoThin = Rswift.FontResource(fontName: "Roboto-Thin")

    /// `UIFont(name: "Roboto-Black", size: ...)`
    static func robotoBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBlack, size: size)
    }

    /// `UIFont(name: "Roboto-BlackItalic", size: ...)`
    static func robotoBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBlackItalic, size: size)
    }

    /// `UIFont(name: "Roboto-Bold", size: ...)`
    static func robotoBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBold, size: size)
    }

    /// `UIFont(name: "Roboto-BoldItalic", size: ...)`
    static func robotoBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBoldItalic, size: size)
    }

    /// `UIFont(name: "Roboto-Italic", size: ...)`
    static func robotoItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoItalic, size: size)
    }

    /// `UIFont(name: "Roboto-Light", size: ...)`
    static func robotoLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoLight, size: size)
    }

    /// `UIFont(name: "Roboto-LightItalic", size: ...)`
    static func robotoLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoLightItalic, size: size)
    }

    /// `UIFont(name: "Roboto-Medium", size: ...)`
    static func robotoMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoMedium, size: size)
    }

    /// `UIFont(name: "Roboto-MediumItalic", size: ...)`
    static func robotoMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoMediumItalic, size: size)
    }

    /// `UIFont(name: "Roboto-Regular", size: ...)`
    static func robotoRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoRegular, size: size)
    }

    /// `UIFont(name: "Roboto-Thin", size: ...)`
    static func robotoThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoThin, size: size)
    }

    /// `UIFont(name: "Roboto-ThinItalic", size: ...)`
    static func robotoThinItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoThinItalic, size: size)
    }

    static func validate() throws {
      if R.font.robotoBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Black' could not be loaded, is 'Roboto-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-BlackItalic' could not be loaded, is 'Roboto-BlackItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Bold' could not be loaded, is 'Roboto-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-BoldItalic' could not be loaded, is 'Roboto-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Italic' could not be loaded, is 'Roboto-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Light' could not be loaded, is 'Roboto-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-LightItalic' could not be loaded, is 'Roboto-LightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Medium' could not be loaded, is 'Roboto-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-MediumItalic' could not be loaded, is 'Roboto-MediumItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Regular' could not be loaded, is 'Roboto-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Thin' could not be loaded, is 'Roboto-Thin.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoThinItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-ThinItalic' could not be loaded, is 'Roboto-ThinItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 18 images.
  struct image {
    /// Image `Screen Shot 2020-08-03 at 14.54.25`.
    static let screenShot20200803At145425 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Screen Shot 2020-08-03 at 14.54.25")
    /// Image `group40`.
    static let group40 = Rswift.ImageResource(bundle: R.hostingBundle, name: "group40")
    /// Image `iconAddNewCity`.
    static let iconAddNewCity = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconAddNewCity")
    /// Image `iconBackBtn`.
    static let iconBackBtn = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconBackBtn")
    /// Image `iconCitiesTabBarSelected`.
    static let iconCitiesTabBarSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconCitiesTabBarSelected")
    /// Image `iconCitiesTabBarUnSelected`.
    static let iconCitiesTabBarUnSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconCitiesTabBarUnSelected")
    /// Image `iconDown`.
    static let iconDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconDown")
    /// Image `iconEditTheCity`.
    static let iconEditTheCity = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconEditTheCity")
    /// Image `iconHomeTabBarSelected`.
    static let iconHomeTabBarSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconHomeTabBarSelected")
    /// Image `iconHomeTabBarUnSelected`.
    static let iconHomeTabBarUnSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconHomeTabBarUnSelected")
    /// Image `iconHumidity`.
    static let iconHumidity = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconHumidity")
    /// Image `iconRemoveTheCity`.
    static let iconRemoveTheCity = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconRemoveTheCity")
    /// Image `iconSearch`.
    static let iconSearch = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconSearch")
    /// Image `iconSeeing`.
    static let iconSeeing = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconSeeing")
    /// Image `iconSun`.
    static let iconSun = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconSun")
    /// Image `iconSunny`.
    static let iconSunny = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconSunny")
    /// Image `iconUp`.
    static let iconUp = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconUp")
    /// Image `iconWind`.
    static let iconWind = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconWind")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Screen Shot 2020-08-03 at 14.54.25", bundle: ..., traitCollection: ...)`
    static func screenShot20200803At145425(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.screenShot20200803At145425, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "group40", bundle: ..., traitCollection: ...)`
    static func group40(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group40, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconAddNewCity", bundle: ..., traitCollection: ...)`
    static func iconAddNewCity(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconAddNewCity, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconBackBtn", bundle: ..., traitCollection: ...)`
    static func iconBackBtn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBackBtn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconCitiesTabBarSelected", bundle: ..., traitCollection: ...)`
    static func iconCitiesTabBarSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconCitiesTabBarSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconCitiesTabBarUnSelected", bundle: ..., traitCollection: ...)`
    static func iconCitiesTabBarUnSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconCitiesTabBarUnSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconDown", bundle: ..., traitCollection: ...)`
    static func iconDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconDown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconEditTheCity", bundle: ..., traitCollection: ...)`
    static func iconEditTheCity(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconEditTheCity, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconHomeTabBarSelected", bundle: ..., traitCollection: ...)`
    static func iconHomeTabBarSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconHomeTabBarSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconHomeTabBarUnSelected", bundle: ..., traitCollection: ...)`
    static func iconHomeTabBarUnSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconHomeTabBarUnSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconHumidity", bundle: ..., traitCollection: ...)`
    static func iconHumidity(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconHumidity, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconRemoveTheCity", bundle: ..., traitCollection: ...)`
    static func iconRemoveTheCity(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconRemoveTheCity, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconSearch", bundle: ..., traitCollection: ...)`
    static func iconSearch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSearch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconSeeing", bundle: ..., traitCollection: ...)`
    static func iconSeeing(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSeeing, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconSun", bundle: ..., traitCollection: ...)`
    static func iconSun(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSun, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconSunny", bundle: ..., traitCollection: ...)`
    static func iconSunny(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSunny, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconUp", bundle: ..., traitCollection: ...)`
    static func iconUp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconUp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconWind", bundle: ..., traitCollection: ...)`
    static func iconWind(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconWind, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = true

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let storyboardName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "Storyboard Name") ?? "Main"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 13 nibs.
  struct nib {
    /// Nib `AddNewCityCVCell`.
    static let addNewCityCVCell = _R.nib._AddNewCityCVCell()
    /// Nib `CityCVCell`.
    static let cityCVCell = _R.nib._CityCVCell()
    /// Nib `EditingCityCVCell`.
    static let editingCityCVCell = _R.nib._EditingCityCVCell()
    /// Nib `HomeCitiesCVCell`.
    static let homeCitiesCVCell = _R.nib._HomeCitiesCVCell()
    /// Nib `HomeCityCVCell`.
    static let homeCityCVCell = _R.nib._HomeCityCVCell()
    /// Nib `HomeDailyWeatherCVCell`.
    static let homeDailyWeatherCVCell = _R.nib._HomeDailyWeatherCVCell()
    /// Nib `HomeGeneralCVCell`.
    static let homeGeneralCVCell = _R.nib._HomeGeneralCVCell()
    /// Nib `HomeTimeCVCell`.
    static let homeTimeCVCell = _R.nib._HomeTimeCVCell()
    /// Nib `HomeWeeklyWeatherCVCell`.
    static let homeWeeklyWeatherCVCell = _R.nib._HomeWeeklyWeatherCVCell()
    /// Nib `SearchCustomView`.
    static let searchCustomView = _R.nib._SearchCustomView()
    /// Nib `TabBarCustomView`.
    static let tabBarCustomView = _R.nib._TabBarCustomView()
    /// Nib `TimeCVCell`.
    static let timeCVCell = _R.nib._TimeCVCell()
    /// Nib `WeeklyWeatherView`.
    static let weeklyWeatherView = _R.nib._WeeklyWeatherView()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddNewCityCVCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addNewCityCVCell) instead")
    static func addNewCityCVCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addNewCityCVCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CityCVCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.cityCVCell) instead")
    static func cityCVCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cityCVCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EditingCityCVCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.editingCityCVCell) instead")
    static func editingCityCVCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.editingCityCVCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeCitiesCVCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeCitiesCVCell) instead")
    static func homeCitiesCVCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeCitiesCVCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeCityCVCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeCityCVCell) instead")
    static func homeCityCVCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeCityCVCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeDailyWeatherCVCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeDailyWeatherCVCell) instead")
    static func homeDailyWeatherCVCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeDailyWeatherCVCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeGeneralCVCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeGeneralCVCell) instead")
    static func homeGeneralCVCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeGeneralCVCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeTimeCVCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeTimeCVCell) instead")
    static func homeTimeCVCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeTimeCVCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeWeeklyWeatherCVCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeWeeklyWeatherCVCell) instead")
    static func homeWeeklyWeatherCVCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeWeeklyWeatherCVCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SearchCustomView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchCustomView) instead")
    static func searchCustomView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchCustomView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TabBarCustomView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tabBarCustomView) instead")
    static func tabBarCustomView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tabBarCustomView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TimeCVCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.timeCVCell) instead")
    static func timeCVCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.timeCVCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WeeklyWeatherView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.weeklyWeatherView) instead")
    static func weeklyWeatherView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.weeklyWeatherView)
    }
    #endif

    static func addNewCityCVCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddNewCityCVCell? {
      return R.nib.addNewCityCVCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddNewCityCVCell
    }

    static func cityCVCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CityCVCell? {
      return R.nib.cityCVCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CityCVCell
    }

    static func editingCityCVCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EditingCityCVCell? {
      return R.nib.editingCityCVCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditingCityCVCell
    }

    static func homeCitiesCVCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeCitiesCVCell? {
      return R.nib.homeCitiesCVCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeCitiesCVCell
    }

    static func homeCityCVCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeCityCVCell? {
      return R.nib.homeCityCVCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeCityCVCell
    }

    static func homeDailyWeatherCVCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeDailyWeatherCVCell? {
      return R.nib.homeDailyWeatherCVCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeDailyWeatherCVCell
    }

    static func homeGeneralCVCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeGeneralCVCell? {
      return R.nib.homeGeneralCVCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeGeneralCVCell
    }

    static func homeTimeCVCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeTimeCVCell? {
      return R.nib.homeTimeCVCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeTimeCVCell
    }

    static func homeWeeklyWeatherCVCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeWeeklyWeatherCVCell? {
      return R.nib.homeWeeklyWeatherCVCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeWeeklyWeatherCVCell
    }

    static func searchCustomView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchCustomView? {
      return R.nib.searchCustomView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchCustomView
    }

    static func tabBarCustomView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TabBarCustomView? {
      return R.nib.tabBarCustomView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TabBarCustomView
    }

    static func timeCVCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TimeCVCell? {
      return R.nib.timeCVCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TimeCVCell
    }

    static func weeklyWeatherView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WeeklyWeatherView? {
      return R.nib.weeklyWeatherView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WeeklyWeatherView
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 10 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AddNewCityCVCell`.
    static let addNewCityCVCell: Rswift.ReuseIdentifier<AddNewCityCVCell> = Rswift.ReuseIdentifier(identifier: "AddNewCityCVCell")
    /// Reuse identifier `CityCVCell`.
    static let cityCVCell: Rswift.ReuseIdentifier<CityCVCell> = Rswift.ReuseIdentifier(identifier: "CityCVCell")
    /// Reuse identifier `EditingCityCVCell`.
    static let editingCityCVCell: Rswift.ReuseIdentifier<EditingCityCVCell> = Rswift.ReuseIdentifier(identifier: "EditingCityCVCell")
    /// Reuse identifier `HomeCitiesCVCell`.
    static let homeCitiesCVCell: Rswift.ReuseIdentifier<HomeCitiesCVCell> = Rswift.ReuseIdentifier(identifier: "HomeCitiesCVCell")
    /// Reuse identifier `HomeCityCVCell`.
    static let homeCityCVCell: Rswift.ReuseIdentifier<HomeCityCVCell> = Rswift.ReuseIdentifier(identifier: "HomeCityCVCell")
    /// Reuse identifier `HomeDailyWeatherCVCell`.
    static let homeDailyWeatherCVCell: Rswift.ReuseIdentifier<HomeDailyWeatherCVCell> = Rswift.ReuseIdentifier(identifier: "HomeDailyWeatherCVCell")
    /// Reuse identifier `HomeGeneralCVCell`.
    static let homeGeneralCVCell: Rswift.ReuseIdentifier<HomeGeneralCVCell> = Rswift.ReuseIdentifier(identifier: "HomeGeneralCVCell")
    /// Reuse identifier `HomeTimeCVCell`.
    static let homeTimeCVCell: Rswift.ReuseIdentifier<HomeTimeCVCell> = Rswift.ReuseIdentifier(identifier: "HomeTimeCVCell")
    /// Reuse identifier `HomeWeeklyWeatherCVCell`.
    static let homeWeeklyWeatherCVCell: Rswift.ReuseIdentifier<HomeWeeklyWeatherCVCell> = Rswift.ReuseIdentifier(identifier: "HomeWeeklyWeatherCVCell")
    /// Reuse identifier `TimeCVCell`.
    static let timeCVCell: Rswift.ReuseIdentifier<TimeCVCell> = Rswift.ReuseIdentifier(identifier: "TimeCVCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _CityCVCell.validate()
      try _EditingCityCVCell.validate()
      try _HomeDailyWeatherCVCell.validate()
      try _HomeGeneralCVCell.validate()
      try _SearchCustomView.validate()
      try _TimeCVCell.validate()
      try _WeeklyWeatherView.validate()
    }

    struct _AddNewCityCVCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AddNewCityCVCell

      let bundle = R.hostingBundle
      let identifier = "AddNewCityCVCell"
      let name = "AddNewCityCVCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddNewCityCVCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddNewCityCVCell
      }

      fileprivate init() {}
    }

    struct _CityCVCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CityCVCell

      let bundle = R.hostingBundle
      let identifier = "CityCVCell"
      let name = "CityCVCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CityCVCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CityCVCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "group40", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'group40' is used in nib 'CityCVCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "purplyBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'purplyBlue' is used in storyboard 'CityCVCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "slate", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'slate' is used in storyboard 'CityCVCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _EditingCityCVCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = EditingCityCVCell

      let bundle = R.hostingBundle
      let identifier = "EditingCityCVCell"
      let name = "EditingCityCVCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EditingCityCVCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditingCityCVCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "group40", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'group40' is used in nib 'EditingCityCVCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconEditTheCity", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconEditTheCity' is used in nib 'EditingCityCVCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconRemoveTheCity", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconRemoveTheCity' is used in nib 'EditingCityCVCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "purplyBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'purplyBlue' is used in storyboard 'EditingCityCVCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "slate", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'slate' is used in storyboard 'EditingCityCVCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _HomeCitiesCVCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HomeCitiesCVCell

      let bundle = R.hostingBundle
      let identifier = "HomeCitiesCVCell"
      let name = "HomeCitiesCVCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeCitiesCVCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeCitiesCVCell
      }

      fileprivate init() {}
    }

    struct _HomeCityCVCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HomeCityCVCell

      let bundle = R.hostingBundle
      let identifier = "HomeCityCVCell"
      let name = "HomeCityCVCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeCityCVCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeCityCVCell
      }

      fileprivate init() {}
    }

    struct _HomeDailyWeatherCVCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HomeDailyWeatherCVCell

      let bundle = R.hostingBundle
      let identifier = "HomeDailyWeatherCVCell"
      let name = "HomeDailyWeatherCVCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeDailyWeatherCVCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeDailyWeatherCVCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconHumidity", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconHumidity' is used in nib 'HomeDailyWeatherCVCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconSeeing", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconSeeing' is used in nib 'HomeDailyWeatherCVCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconSunny", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconSunny' is used in nib 'HomeDailyWeatherCVCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconWind", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconWind' is used in nib 'HomeDailyWeatherCVCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "slate", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'slate' is used in storyboard 'HomeDailyWeatherCVCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _HomeGeneralCVCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HomeGeneralCVCell

      let bundle = R.hostingBundle
      let identifier = "HomeGeneralCVCell"
      let name = "HomeGeneralCVCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeGeneralCVCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeGeneralCVCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconDown", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconDown' is used in nib 'HomeGeneralCVCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconSun", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconSun' is used in nib 'HomeGeneralCVCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconUp", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconUp' is used in nib 'HomeGeneralCVCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "purplyBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'purplyBlue' is used in storyboard 'HomeGeneralCVCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "slate", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'slate' is used in storyboard 'HomeGeneralCVCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _HomeTimeCVCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HomeTimeCVCell

      let bundle = R.hostingBundle
      let identifier = "HomeTimeCVCell"
      let name = "HomeTimeCVCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeTimeCVCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeTimeCVCell
      }

      fileprivate init() {}
    }

    struct _HomeWeeklyWeatherCVCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HomeWeeklyWeatherCVCell

      let bundle = R.hostingBundle
      let identifier = "HomeWeeklyWeatherCVCell"
      let name = "HomeWeeklyWeatherCVCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeWeeklyWeatherCVCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeWeeklyWeatherCVCell
      }

      fileprivate init() {}
    }

    struct _SearchCustomView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SearchCustomView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchCustomView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchCustomView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconBackBtn", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconBackBtn' is used in nib 'SearchCustomView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconSearch", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconSearch' is used in nib 'SearchCustomView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "purplyBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'purplyBlue' is used in storyboard 'SearchCustomView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "slate", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'slate' is used in storyboard 'SearchCustomView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _TabBarCustomView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TabBarCustomView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TabBarCustomView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TabBarCustomView
      }

      fileprivate init() {}
    }

    struct _TimeCVCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = TimeCVCell

      let bundle = R.hostingBundle
      let identifier = "TimeCVCell"
      let name = "TimeCVCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TimeCVCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TimeCVCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "group40", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'group40' is used in nib 'TimeCVCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "slate", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'slate' is used in storyboard 'TimeCVCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _WeeklyWeatherView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WeeklyWeatherView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WeeklyWeatherView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WeeklyWeatherView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "group40", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'group40' is used in nib 'WeeklyWeatherView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "blueGrey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'blueGrey' is used in storyboard 'WeeklyWeatherView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "slate", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'slate' is used in storyboard 'WeeklyWeatherView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if UIKit.UIImage(named: "Screen Shot 2020-08-03 at 14.54.25", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Screen Shot 2020-08-03 at 14.54.25' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconBackBtn", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconBackBtn' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconSearch", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconSearch' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "purplyBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'purplyBlue' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "slate", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'slate' is used in storyboard 'Main', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
